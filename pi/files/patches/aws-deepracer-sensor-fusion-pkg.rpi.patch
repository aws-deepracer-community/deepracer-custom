diff --git a/sensor_fusion_pkg/src/sensor_fusion_node.cpp b/sensor_fusion_pkg/src/sensor_fusion_node.cpp
index 028191a..ad5430b 100644
--- a/sensor_fusion_pkg/src/sensor_fusion_node.cpp
+++ b/sensor_fusion_pkg/src/sensor_fusion_node.cpp
@@ -283,25 +283,40 @@ namespace SensorFusion {
         /// @param msg Message with images from DeepRacer cameras.
         void displayCB(const sensor_msgs::msg::Image::ConstSharedPtr & msg) {
             try {
-                std::bitset<8> sectorOverlayValues;
-                {
-                    std::lock_guard<std::mutex> guard(lidarMutex_);
-                    size_t blockSize = overlayLidarData_.size()/sensorConfiguration_[LIDAR_OVERLAY_KEY][LIDAR_OVERLAY_CONFIG_LIDAR_OVERLAY_NUM_SECTORS_KEY];
-                    if(blockSize == 8){
-                        auto overlaySectorLidarData = binarySectorizeLidarData(overlayLidarData_,
-                                                                               blockSize,
-                                                                               sensorConfiguration_[LIDAR_OVERLAY_KEY][LIDAR_OVERLAY_CONFIG_MAX_LIDAR_DIST_KEY]);
-                        for(size_t sector_idx = 0; sector_idx < overlaySectorLidarData.size(); sector_idx++){
-                            sectorOverlayValues[sector_idx] = (int)overlaySectorLidarData[sector_idx];
+                std::chrono::duration<float> timeSinceLastLidar = std::chrono::steady_clock::now() - lastLidarMsgRecievedTime;
+                std::chrono::duration<float> LIDAR_DATA_MAX_AGE(1.0);
+
+                cv::Mat resizedImg;
+
+                if ( timeSinceLastLidar < LIDAR_DATA_MAX_AGE ) {
+                    std::bitset<8> sectorOverlayValues;
+                    {
+                        std::lock_guard<std::mutex> guard(lidarMutex_);
+                        size_t blockSize = overlayLidarData_.size()/sensorConfiguration_[LIDAR_OVERLAY_KEY][LIDAR_OVERLAY_CONFIG_LIDAR_OVERLAY_NUM_SECTORS_KEY];
+                        if(blockSize == 8){
+                            auto overlaySectorLidarData = binarySectorizeLidarData(overlayLidarData_,
+                                                                                blockSize,
+                                                                                sensorConfiguration_[LIDAR_OVERLAY_KEY][LIDAR_OVERLAY_CONFIG_MAX_LIDAR_DIST_KEY]);
+                            for(size_t sector_idx = 0; sector_idx < overlaySectorLidarData.size(); sector_idx++){
+                                sectorOverlayValues[sector_idx] = (int)overlaySectorLidarData[sector_idx];
+                            }
                         }
                     }
+
+                    cv::resize(cv_bridge::toCvCopy(msg, "bgr8")->image, resizedImg, cv::Size(imageWidth_, imageHeight_));
+                    cv::Mat overlayCVImage = lidarOverlayProcessingObj_.overlayLidarDataOnImage(resizedImg, sectorOverlayValues);
+                    if(enableOverlayPublish_) {
+                        // Publish Lidar Overlay
+                        overlayImagePub_.publish(*(cv_bridge::CvImage(std_msgs::msg::Header(), "bgr8", overlayCVImage).toImageMsg().get()));
+                    }
                 }
-                cv::Mat resizedImg;
-                cv::resize(cv_bridge::toCvCopy(msg, "bgr8")->image, resizedImg, cv::Size(imageWidth_, imageHeight_));
-                cv::Mat overlayCVImage = lidarOverlayProcessingObj_.overlayLidarDataOnImage(resizedImg, sectorOverlayValues);
-                if(enableOverlayPublish_) {
-                    // Publish Lidar Overlay
-                    overlayImagePub_.publish(*(cv_bridge::CvImage(std_msgs::msg::Header(), "bgr8", overlayCVImage).toImageMsg().get()));
+                else {
+                    if (msg->height > imageHeight_) {
+                        cv::resize(cv_bridge::toCvCopy(msg, "bgr8")->image, resizedImg, cv::Size(imageWidth_, imageHeight_));
+                    } else {
+                        resizedImg = cv_bridge::toCvCopy(msg, "bgr8")->image;
+                    }
+                    overlayImagePub_.publish(*(cv_bridge::CvImage(std_msgs::msg::Header(), "bgr8", resizedImg).toImageMsg().get()));
                 }
             }
             catch (const std::exception &ex) {
@@ -560,8 +575,8 @@ namespace SensorFusion {
         std::chrono::steady_clock::time_point lastLidarMsgRecievedTime;
         std::chrono::steady_clock::time_point lastCameraMsgRecievedTime;
         size_t cameraImageCount_;
-        int imageWidth_;
-        int imageHeight_;
+        unsigned int imageWidth_;
+        unsigned int imageHeight_;
         std::mutex lidarMutex_;
 
     };
